chipollino_path: ./Chipollino

types:
  NFA:
    class: FiniteAutomaton
    children: [DFA]
    ru_str: 'автомат'
  DFA:
    class: FiniteAutomaton
    ru_str: 'автомат'
  Regex:
    class: Regex
    ru_str: 'регулярное выражение'
  RandomRegex:
  Int:
    class: int
    ru_str: 'значение'
  String:
    class: std::string
    ru_str: 'строка'
  Boolean:
    class: bool
    ru_str: 'значение'
  OptionalBool:
    class: std::optional<bool>
    ru_str: 'значение'
  AmbiguityValue:
    class: FiniteAutomaton::AmbiguityValue
    ru_str: 'значение'
  PrefixGrammar:
    class: PrefixGrammar
    ru_str: 'грамматика'
  Array:
    class: std::vector<GeneralObject>
    ru_str: 'массив'

functions:
 - name: Thompson
   prog_name: to_thompson
   return_type: NFA
   arguments: [Regex]

 - name: IlieYu
   prog_name: 
   return_type: NFA
   arguments: [Regex]

 - name: Antimirov
   prog_name: 
   return_type: NFA
   arguments: [Regex]

 - name: Arden
   prog_name: 
   return_type: Regex
   arguments: [NFA]

 - name: Glushkov
   prog_name: 
   return_type: NFA
   arguments: [Regex]

 - name: Determinize
   prog_name: 
   return_type: DFA
   arguments: [NFA]

 - name: Determinize+
   prog_name: 
   return_type: DFA
   arguments: [NFA]
   need_template: false 

 - name: RemEps
   prog_name: 
   return_type: NFA
   arguments: [NFA]

 - name: Linearize
   prog_name: 
   return_type: Regex
   arguments: [Regex]

 - name: Minimize
   prog_name: 
   return_type: DFA
   arguments: [NFA]

 - name: Minimize+
   prog_name: 
   return_type: DFA
   arguments: [NFA]
   need_template: false 

 - name: Reverse
   prog_name: 
   return_type: NFA
   arguments: [NFA]

 - name: Annote
   prog_name: 
   return_type: DFA
   arguments: [NFA]

 - name: DeLinearize
   prog_name: 
   return_type: Regex
   arguments: [Regex]

 - name: DeLinearize
   prog_name: 
   return_type: NFA
   arguments: [NFA]

 - name: Complement
   prog_name: 
   return_type: DFA
   arguments: [DFA]

 - name: RemoveTrap
   prog_name: 
   return_type: DFA
   arguments: [DFA]

 - name: DeAnnote
   prog_name: 
   return_type: Regex
   arguments: [Regex]

 - name: DeAnnote
   prog_name: 
   return_type: NFA
   arguments: [NFA]

 - name: MergeBisim
   prog_name: 
   return_type: NFA
   arguments: [NFA]

 - name: Disambiguate
   prog_name: 
   return_type: Regex
   arguments: [Regex]

 - name: Intersect
   prog_name: 
   return_type: NFA
   arguments: [NFA, NFA]

 - name: Union
   prog_name: 
   return_type: NFA
   arguments: [NFA, NFA]

 - name: Difference
   prog_name: 
   return_type: NFA
   arguments: [NFA, NFA]

 - name: PumpLength
   prog_name: 
   return_type: Int
   arguments: [Regex]

 - name: ClassLength
   prog_name: 
   return_type: Int
   arguments: [NFA]

 - name: Normalize
   prog_name: 
   return_type: Regex
   arguments: [Regex, Array]

 - name: States
   prog_name: 
   return_type: Int
   arguments: [NFA]

 - name: ClassCard
   prog_name: 
   return_type: Int
   arguments: [NFA]

 - name: Ambiguity
   prog_name: 
   return_type: AmbiguityValue
   arguments: [NFA]

 - name: MyhillNerode
   prog_name: 
   return_type: Int
   arguments: [NFA]

 - name: GlaisterShallit
   prog_name: 
   return_type: Int
   arguments: [NFA]

 - name: PrefixGrammar
   prog_name: 
   return_type: PrefixGrammar
   arguments: [NFA]

 - name: PGtoNFA
   prog_name: 
   return_type: NFA
   arguments: [PrefixGrammar]

 - name: Bisimilar
   prog_name: bisimilar
   return_type: Boolean
   arguments: [NFA, NFA]

 - name: Minimal
   prog_name: 
   return_type: OptionalBool
   arguments: [NFA]

 - name: Deterministic
   prog_name: 
   return_type: Boolean
   arguments: [NFA]

 - name: Subset
   prog_name: subset
   return_type: Boolean
   arguments: [Regex, Regex]

 - name: Subset
   prog_name: subset
   return_type: Boolean
   arguments: [NFA, NFA]

 - name: Equiv
   prog_name: 
   return_type: Boolean
   arguments: [Regex, Regex]

 - name: Equiv
   prog_name: 
   return_type: Boolean
   arguments: [NFA, NFA]

 - name: Equal
   prog_name: 
   return_type: Boolean
   arguments: [Regex, Regex]

 - name: Equal
   prog_name: 
   return_type: Boolean
   arguments: [NFA, NFA]

 - name: Equal
   prog_name: 
   return_type: Boolean
   arguments: [Int, Int]

 - name: Equal
   prog_name: 
   return_type: Boolean
   arguments: [AmbiguityValue, AmbiguityValue]

 - name: Equal
   prog_name: 
   return_type: Boolean
   arguments: [Boolean, Boolean]

 - name: OneUnambiguity
   prog_name: 
   return_type: Boolean
   arguments: [Regex]

 - name: OneUnambiguity
   prog_name: 
   return_type: Boolean
   arguments: [NFA]

 - name: SemDet
   prog_name: 
   return_type: Boolean
   arguments: [NFA]